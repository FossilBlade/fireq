#!/usr/bin/env python3
import argparse
import logging
import os
import subprocess

log = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.DEBUG,
    datefmt='%H:%M:%S',
    format='%(asctime)s %(message)s'
)
root = os.path.dirname(__file__)
dry_run = False


def remote(cmd, host, opts='-o "StrictHostKeyChecking no"'):
    cmd = cmd.replace('"', '\\"')
    return (
        'rsync -ahv -e \'ssh {opts}\' {root}/ {host}:{tmp}/;'
        'ssh {opts} {host} "cd {tmp}; {cmd}"'
        .format(tmp='/tmp/deploy', root=root, host=host, opts=opts, cmd=cmd)
    )


def sh(cmd, params=None, ssh=None, exit=True):
    params = params or {}
    if ssh:
        cmd = remote(cmd, ssh)

    log.info(cmd)
    if dry_run:
        log.info('Dry run!')
        return 0

    code = subprocess.call(cmd, shell=True)
    if exit and code:
        raise SystemExit(code)
    return code


def main():
    global dry_run

    parser = argparse.ArgumentParser('sd')
    cmds = parser.add_subparsers(help='commands')

    def cmd(name, **kw):
        p = cmds.add_parser(name, **kw)
        p.set_defaults(cmd=name)
        p.arg = lambda *a, **kw: p.add_argument(*a, **kw) and p
        p.exe = lambda f: p.set_defaults(exe=f) and p

        p.arg('--dry-run', action='store_true')
        return p

    def ssh(ssh, lxc_name):
        return (
            ssh or
            (lxc_name and 'root@$(lxc-info -n %s -iH)' % lxc_name)
        )

    cmd('install', aliases=['i'])\
        .arg('--lxc-name')\
        .arg('--ssh')\
        .arg('-e', '--endpoint', default='superdesk/master')\
        .arg('--prepopulate', action='store_true')\
        .arg('--services', action='store_true')\
        .arg('--force-frontend', action='store_true')\
        .exe(lambda a: sh(
            'services={services} '
            'force_frontend={force_frontend} '
            'prepopulate={prepopulate} '
            '{endpoint}'
            .format(
                services=a.services or '',
                force_frontend=a.force_frontend or '',
                prepopulate=a.prepopulate or '',
                endpoint=a.endpoint
            ),
            ssh=ssh(a.ssh, a.lxc_name)
        ))

    cmd('run', aliases=['r'])\
        .arg('--lxc-name')\
        .arg('--ssh')\
        .arg('-e', '--endpoint', default='superdesk/master')\
        .arg('action')\
        .exe(lambda a: sh(
            'action={action} {endpoint}'
            .format(action=a.action, endpoint=a.endpoint),
            ssh=ssh(a.ssh, a.lxc_name)
        ))
    cmd('lxc-base')\
        .arg('-n', '--name', default='sd0')\
        .arg('--rm', action='store_true')\
        .exe(lambda a: sh(
            'name={name} '
            'rm={rm} '
            'bin/lxc_base.sh'
            .format(name=a.name, rm=a.rm or '')
        ))

    cmd('lxc-web')\
        .arg('-n', '--name', default='sd0')\
        .arg('-d', '--domain', required=True)\
        .exe(lambda a: sh(
            'name={name} '
            'domain={domain} '
            'bin/lxc_web.sh'
            .format(name=a.name, domain=a.domain)
        ))

    args = parser.parse_args()
    dry_run = args.dry_run
    if not hasattr(args, 'exe'):
        parser.print_usage()
    else:
        args.exe(args)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        raise SystemExit(1)
