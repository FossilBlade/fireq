#!/usr/bin/env python3
import argparse
import logging
import os
import subprocess

log = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.DEBUG,
    datefmt='%H:%M:%S',
    format='%(asctime)s %(message)s'
)
root = os.path.dirname(__file__)
dry_run = False


def remote(cmd, opts, **kw):
    cmd = cmd.replace('"', '\\"')
    return (
        'scp -r {root} {opts}:{tmp};'
        'ssh {opts} "cd {tmp}; {cmd}"'
        .format(tmp='/tmp/deploy', root=root, opts=opts, cmd=cmd)
    )


def sh(cmd, params=None, ssh=None, exit=True):
    params = params or {}
    if ssh:
        cmd = remote(cmd, ssh)

    log.info(cmd)
    if dry_run:
        log.info('Dry run!')
        return 0

    code = subprocess.call(cmd, shell=True)
    if exit and code:
        raise SystemExit(code)
    return code


def load(name):
    path = os.path.join(os.path.dirname(__file__), name)
    with open(path, 'br') as f:
        return f.read().decode()


def lxc_base(name, delete=False):
    cmd = ' '.join((
        'name=%s' % name,
        'delete=true' if delete else '',
        'bin/lxc_base.sh'
    ))
    sh(cmd)


def install(ssh=None, services=False, dev=False, force_client=False):
    cmd = ' '.join((
        'dev=true' if dev else '',
        'services=true' if services else '',
        'force_client=true' if force_client else '',
        'bin/install.sh'
    ))
    sh(cmd, ssh=ssh)


def main():
    global dry_run

    parser = argparse.ArgumentParser('sd')
    cmds = parser.add_subparsers(help='commands')

    def cmd(name, **kw):
        p = cmds.add_parser(name, **kw)
        p.set_defaults(cmd=name)
        p.arg = lambda *a, **kw: p.add_argument(*a, **kw) and p
        p.exe = lambda f: p.set_defaults(exe=f) and p

        p.arg('--dry-run', action='store_true')
        return p

    cmd('install', aliases=['i'])\
        .arg('-s', '--ssh')\
        .arg('--services', action='store_true')\
        .arg('--dev', action='store_true')\
        .arg('--force-client', action='store_true')\
        .exe(lambda a: install(a.ssh, a.services, a.dev, a.force_client))

    cmd('lxc-base')\
        .arg('-n', '--name', default='sd-test')\
        .arg('-d', '--delete', action='store_true')\
        .exe(lambda a: lxc_base(a.name, a.delete))

    args = parser.parse_args()
    dry_run = args.dry_run
    if not hasattr(args, 'exe'):
        parser.print_usage()
    else:
        args.exe(args)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        raise SystemExit(1)
