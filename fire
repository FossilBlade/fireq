#!/usr/bin/env python3
import argparse
import asyncio
import json
import logging
import subprocess
from pathlib import Path

log = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.DEBUG,
    datefmt='%H:%M:%S',
    format='%(asctime)s %(message)s'
)
root = Path(__file__).resolve().parent
dry_run = False


def remote(cmd, host, opts='-o "StrictHostKeyChecking no"'):
    cmd = cmd.replace('"', '\\"')
    return (
        'set -e;rsync -ahv --delete'
        ' -e \'ssh {opts}\''
        ' --exclude=.git --exclude=push --exclude=env'
        ' {root}/ {host}:{tmp}/;'
        'ssh {opts} {host} "cd {tmp}; {cmd}"'
        .format(tmp='/tmp/deploy', root=root, host=host, opts=opts, cmd=cmd)
    )


def sh(cmd, params=None, ssh=None, exit=True, sudo=False, sync=True):
    params = params or {}
    if sudo:
        cmd = 'sudo sh -c %r' % cmd
    if ssh:
        cmd = remote(cmd, ssh)

    log.info(cmd)
    if dry_run:
        log.info('Dry run!')
        return 0

    if sync:
        code = subprocess.call(cmd, shell=True)
        if exit and code:
            raise SystemExit(code)
        return code

    return asyncio.create_subprocess_shell(cmd)


def run_async(func, *a, **kw):
    loop = asyncio.get_event_loop()
    loop.run_until_complete(func(*a, **kw))
    loop.close()


def main():
    global dry_run

    parser = argparse.ArgumentParser('fire')
    cmds = parser.add_subparsers(help='commands')

    def cmd(name, **kw):
        p = cmds.add_parser(name, **kw)
        p.set_defaults(cmd=name)
        p.arg = lambda *a, **kw: p.add_argument(*a, **kw) and p
        p.exe = lambda f: p.set_defaults(exe=f) and p

        p.arg('--dry-run', action='store_true')
        return p

    def ssh(ssh, lxc_name):
        return (
            ssh or
            (lxc_name and 'root@$(sudo lxc-info -n %s -iH)' % lxc_name)
        )

    cmd('install', aliases=['i'])\
        .arg('--lxc-name')\
        .arg('--ssh')\
        .arg('-e', '--endpoint', default='superdesk/master')\
        .arg('--prepopulate', action='store_true')\
        .arg('--services', action='store_true')\
        .arg('--force-frontend', action='store_true')\
        .arg('--env')\
        .exe(lambda a: sh(
            'services={services} '
            'force_frontend={force_frontend} '
            'prepopulate={prepopulate} '
            'action=do_install '
            '{env} '
            '{endpoint}'
            .format(
                services=a.services or '',
                force_frontend=a.force_frontend or '',
                prepopulate=a.prepopulate or '',
                endpoint=a.endpoint,
                env=a.env or ''
            ),
            ssh=ssh(a.ssh, a.lxc_name)
        ))

    cmd('run', aliases=['r'])\
        .arg('--lxc-name')\
        .arg('--ssh')\
        .arg('-e', '--endpoint', default='superdesk/master')\
        .arg('-a', '--action', default='')\
        .arg('--env')\
        .exe(lambda a: sh(
            'action={action!r} {env} {endpoint}'
            .format(action=a.action, endpoint=a.endpoint, env=a.env or ''),
            ssh=ssh(a.ssh, a.lxc_name)
        ))

    cmd('gen-files')\
        .exe(lambda a: sh('bin/gen-files.sh'))

    cmd('lxc-init')\
        .arg('-n', '--name', default='sd0')\
        .arg('--rm', action='store_true')\
        .arg('-k', '--keys', default='/root/.ssh/id_rsa.pub')\
        .exe(lambda a: sh(
            'name={name} '
            'rm={rm} '
            'keys={keys} '
            'bin/lxc-init.sh'
            .format(name=a.name, rm=a.rm or '', keys=a.keys)
        ))

    cmd('lxc-web')\
        .arg('-n', '--name', default='sd0')\
        .arg('-d', '--domain', required=True)\
        .arg('-c', '--clean', action='store_true')\
        .exe(lambda a: sh(
            'name={name} '
            'domain={domain} '
            'clean={clean} '
            'bin/lxc-web.sh'
            .format(name=a.name, domain=a.domain, clean=a.clean or '')
        ))

    cmd('lxc-base')\
        .arg('-n', '--name', default='sd-base')\
        .arg('-p', '--path', default='/opt/superdesk')\
        .exe(lambda a: sh(
            'set -ex;'
            './fire lxc-init -n {name} --rm;'
            './fire i --lxc-name={name} --services;'
            './fire lxc-ssh sd-base -c "rm -rf {path}";'
            'lxc-stop -n {name}'
            .format(name=a.name, path=a.path)
        ))

    cmd('lxc-rm')\
        .arg('name', nargs='+')\
        .exe(lambda a: sh('; '.join(
            'lxc-stop -n {name};'
            'lxc-destroy -n {name}'
            .format(name=name)
            for name in a.name
        )))

    cmd('lxc-ssh')\
        .arg('name')\
        .arg('-c', '--cmd', default='')\
        .exe(lambda a: sh(
            'ssh -o "StrictHostKeyChecking no" $(lxc-info -n %s -iH) %s'
            % (a.name, a.cmd),
            sudo=True
        ))

    cmd('lxc-wait')\
        .arg('name')\
        .exe(lambda a: sh(
            'while ! $(./fire lxc-ssh %s -c true); do sleep 1; done'
            % a.name

        ))

    cmd('lxc-clean')\
        .arg('pattern', default='^sd', nargs='?')\
        .exe(lambda a: sh(
            'lxc-ls -1 | grep "%s" | xargs ./fire lxc-rm'
            % a.pattern
        ))

    try:
        import web

        def gh_push(path, *a, **kw):
            path = Path(path)
            with (path / 'request.json').open('r') as f:
                req = json.loads(f.read())
            code = run_async(web.gh_push, req, *a, **kw)
            raise SystemExit(code)

        cmd('gh-push')\
            .arg('path')\
            .arg('-c', '--clean', action='store_true')\
            .arg('--clean-web', action='store_true')\
            .exe(lambda a: gh_push(a.path, a.clean, a.clean_web))
    except Exception as e:
        print('Can\'t import web.py module: %s' % e)

    args = parser.parse_args()
    dry_run = args.dry_run
    if not hasattr(args, 'exe'):
        parser.print_usage()
    else:
        args.exe(args)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        raise SystemExit(1)
