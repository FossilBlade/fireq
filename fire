#!/usr/bin/env python3
import argparse
import os
import subprocess
import sys

from fireq import log, conf

dry_run = False
ssh_opts = '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'


def sh(cmd, exit=True):
    log.info(cmd)
    if dry_run:
        log.info('Dry run!')
        return 0

    code = subprocess.call(cmd, executable='/bin/bash', shell=True)
    if exit and code:
        raise SystemExit(code)
    return code


def main():
    global dry_run

    parser = argparse.ArgumentParser('fire')
    cmds = parser.add_subparsers(help='commands')

    def cmd(name, **kw):
        p = cmds.add_parser(name, **kw)
        p.set_defaults(cmd=name)
        p.arg = lambda *a, **kw: p.add_argument(*a, **kw) and p
        p.exe = lambda f: p.set_defaults(exe=f) and p

        p.arg('--dry-run', action='store_true')
        return p

    cmd('lxc-base')\
        .arg('-n', '--name', default=conf['lxc_base'])\
        .arg('-p', '--path', default='/opt/superdesk')\
        .arg('-o', '--opts', default='-B zfs')\
        .arg('--no-services', action='store_true')\
        .exe(lambda a: sh(
            'set -ex;'
            'tmp={name}--tmp; '
            './fire lxc-init -n $tmp --rm -o {opts!r};'
            './fire i --lxc-name=$tmp -e superdesk-dev/master {services};'
            './fire lxc-ssh $tmp -c "rm -rf {path}";'
            './fire lxc-copy -rc --no-snapshot -b $tmp {name};'
            .format(
                name=a.name, path=a.path, opts=a.opts,
                services='' if a.no_services else '--services'
            )
        ))

    cmd('lxc-clean')\
        .arg('pattern', default='^sd', nargs='?')\
        .exe(lambda a: sh(
            'lxc-ls -1'
            '   | grep -e "{pattern}"'
            '   | sort -r'
            '   | xargs -r ./fire lxc-rm'
            .format(pattern=a.pattern)
        ))

    args = parser.parse_args()
    dry_run = getattr(args, 'dry_run', dry_run)
    if not hasattr(args, 'exe'):
        parser.print_usage()
    else:
        args.exe(args)


if __name__ == '__main__':
    try:
        if os.geteuid() != 0:
            subprocess.call(['sudo', sys.executable] + sys.argv)
        else:
            os.chdir(os.path.dirname(__file__))
            main()
    except KeyboardInterrupt:
        raise SystemExit(1)
