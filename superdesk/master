#!/bin/bash
set -ex

name=${name:-superdesk}
repo_remote=${repo_remote:-https://github.com/superdesk/superdesk.git}

root=$(dirname $(dirname $(realpath -s $0)))
. $root/common/index.sh

_envfile_append() {
    cat <<EOF
# Superdesk custom
SECRET_KEY=${SECRET_KEY-"$(python -c 'import uuid; print(uuid.uuid4())')"}
REUTERS_USERNAME=${REUTERS_USERNAME-''}
REUTERS_PASSWORD=${REUTERS_PASSWORD-''}
EOF
}

_nginx_locations() {
    cat <<EOF
location /contentapi {
    proxy_pass http://localhost:5050;
    proxy_set_header Host $host;
    expires epoch;
}
EOF
}

_supervisor_append() {
     cat <<EOF
[program:capi]
command=/bin/sh -c '. $env/bin/activate && exec gunicorn -b 0.0.0.0:5050 content_api.wsgi'
autostart=true
autorestart=true
stdout_logfile=/var/log/supervisor/capi.log
redirect_stderr=true
directory=$repo/server
EOF
}

do_frontend() {
    _activate # env vars
    _npm

    cd $(_repo_client)
    npm install grunt-cli
    time npm install

    #TODO: remove --force later
    time grunt build --server='http://localhost:5000/api' --ws='ws://localhost:5100' --force
    echo "\033[0m"
}

do_prepopulate() {
    _activate
    cd $repo/server

    [ -z "$sample_data" ] || sample_data='--sample-data'
    [ "$(python manage.py app:initialize_data --help | grep -c -- --sample-data)" = "0" ] && sample_data=

    if [ -n "$test_data" ] && [ -n "$lxc_data" ]; then
        curl -sI $lxc_data/$db_name | grep 404 || return 0
        # add default vocabularies
        ./manage.py app:initialize_data --entity-name vocabularies
        # add Forbes ingest source
        ./manage.py app:initialize_data --entity-name ingest_providers $sample_data
        # Use data from e2e tests
        ./manage.py app:prepopulate
        return 0
    fi

    python manage.py app:initialize_data $sample_data
    python manage.py users:create -u admin -p admin -e 'admin@example.com' --admin
}

eval $action
