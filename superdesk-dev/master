#!/bin/bash

root=$(dirname $(dirname $(realpath -s $0)))
action=true . $root/superdesk/master

repo_backend=${repo_backend:-"$repo/server"}

_es_wait() {
    elastic=0
    while [ $elastic -eq 0 ]
    do
        curl -s "http://localhost:9200" 2>&1 > /dev/null \
            && elastic=1 \
            || echo "waiting for elastic..."
        sleep 1
    done
}

_es_init() {
    echo "index.store.type: memory" >> /etc/elasticsearch/elasticsearch.yml

    use_snapshots=${use_snapshots-1}
    if [ -n "$use_snapshots" ]; then
        es_backups=/tmp/es-backups
        if [ ! -d "$es_backups" ]; then
            mkdir $es_backups
            chown elasticsearch:elasticsearch $es_backups
            echo "path.repo: $es_backups" >> /etc/elasticsearch/elasticsearch.yml
            systemctl restart elasticsearch
            _es_wait
            curl -XPUT 'http://localhost:9200/_snapshot/backups' \
                -d '{"type": "fs", "settings": {"location": "/tmp/es-backups"}}'
        fi
    else
        systemctl restart elasticsearch
    fi
    _es_wait
}

_mongo_init() {
    # disable journal
    sudo sed -i 's\enabled: true\enabled: false\' /etc/mongod.conf
    systemctl restart mongod
}

_db_init() {
    _es_init
    _mongo_init
}

_chrome_stable() {
    [ "$(dpkg -l | grep -c google-chrome-stable)" = "0" ] || return 0

    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
    echo "deb http://dl.google.com/linux/chrome/deb/ stable main" \
        > /etc/apt/sources.list.d/google.list
    apt-get update
    apt-get install -y --no-install-recommends xvfb google-chrome-stable
}

_chrome() {
    _chrome_stable
}

_backend_checks() {
    cd $repo_backend

    export SUPERDESK_TESTING=True
    _activate

    # run flake8 with on jobs, because it could lock the build for ever
    [ -z "$flake8" ] || flake8 --jobs=1

    [ -z "$nose" ] || time nosetests -v --with-id

    feature=(./features/*.feature)
    [ -f $feature ] || behave=
    [ -z "$behave" ] || time behave --format progress2 --logging-clear-handlers --logcapture
}

_client_checks() {
    cd $repo/client
    [ -z "$npmtest" ] || time npm test
}

do_finish() {
    _chrome

    _activate
    cd $repo/server
    time pip install -r dev-requirements.txt
}

do_checks() {
    if [ -z "$nose" ] && [ -z "$behave" ] && [ -z "$flake8" ] && [ -z "$npmtest" ]; then
        nose=1
        behave=1
        flake8=1
        npmtest=1
    fi
    _db_init
    _backend_checks
    _client_checks
}

do_docs() { :; }

do_web() {
    # systemctl stop elasticsearch mongod
    # systemctl disable elasticsearch mongodb
    apt-get -y remove \
        openjdk-8-jre-headless \
        elasticsearch \
        mongodb-org-server
    apt-get -y autoremove

    [ -n "$db_name" ] || exit 1
    cat <<EOF >> $envfile
# Persistent storage
MONGO_URI="mongodb://data-sd/${db_name}"
LEGAL_ARCHIVE_URI="mongodb://data-sd/${db_name}_la"
ARCHIVED_URI="mongodb://data-sd/${db_name}_ar"
CONTENTAPI_MONGO_URI="mongodb://data-sd/${db_name}_pa"
PUBLICAPI_MONGO_URI="mongodb://data-sd/${db_name}_pa"
ELASTICSEARCH_URL="http://data-sd:9200"
ELASTICSEARCH_INDEX=${db_name}
CONTENTAPI_ELASTICSEARCH_INDEX=${db_name}_capi
EOF
    supervisorctl restart all

    sample_data=1 do_prepopulate

    do_docs || true
}

eval $action
