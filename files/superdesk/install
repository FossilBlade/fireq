#!/bin/bash
# NOTE: This file is generated by script.
# Modify "tpl/*" and run "./fire gen-files"

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -exuo pipefail
# IFS=$'\n\t'

DEBIAN_FRONTEND=noninteractive
DBUS_SESSION_BUS_ADDRESS=/dev/null

_activate() {
    set +ux
    . /opt/superdesk/env/bin/activate
    set -ux
}

_skip_install() {
    dpkg -l | grep '^ii.*'$1 && [ -z "" ]
}
### build
locale-gen en_US.UTF-8

apt-get -y install --no-install-recommends \
git python3 python3-dev python3-venv \
build-essential libffi-dev \
libtiff5-dev libjpeg8-dev zlib1g-dev \
libfreetype6-dev liblcms2-dev libwebp-dev \
curl libfontconfig libssl-dev


## prepare source code
repo=/opt/superdesk
if [ ! -d $repo ]; then
    mkdir $repo
    cd $repo
    git init
    git remote add origin https://github.com/superdesk/superdesk.git
else
    cd $repo
fi

cd $repo
repo_ref=heads/master
repo_sha=
git fetch origin $repo_ref:
git checkout ${repo_sha:-FETCH_HEAD}
unset repo_sha
unset repo repo_ref


## server part
# init virtualenv
env=/opt/superdesk/env
[ -d $env ] && rm -rf $env
python3 -m venv $env
echo 'export PATH=./node_modules/.bin/:$PATH' >> $env/bin/activate
unset env

_activate
pip install -U pip wheel

cd /opt/superdesk/server
time pip install -U -r requirements.txt


## client part
## node & npm
if ! _skip_install nodejs; then
    curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -
    apt-get install -y nodejs
fi

[ -f /usr/bin/node ] || ln -s /usr/bin/nodejs /usr/bin/node
npm --version
node --version

cd /opt/superdesk/client
npm install grunt-cli
time npm install

# TODO: maybe remove "--force" later
# vars are used in "webpack.config.js"
# export VIEW_DATE_FORMAT='<VIEW_DATE_FORMAT>'
# export VIEW_TIME_FORMAT='<VIEW_TIME_FORMAT>'
time \
SUPERDESK_URL='<SUPERDESK_URL>' \
SUPERDESK_WS_URL='<SUPERDESK_WS_URL>' \
SUPERDESK_RAVEN_DSN='<RAVEN_DSN>' \
IFRAMELY_KEY='<IFRAMELY_KEY>' \
grunt build --force

### databases
## mongo
if ! _skip_install mongodb-org-server; then

    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
    echo "deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse" \
        > /etc/apt/sources.list.d/mongodb-org-3.2.list

    apt-get -y update
    apt-get -y install --no-install-recommends mongodb-org-server

    systemctl enable mongod
fi

# tune mongo
config=/etc/mongod.conf
[ -f "${config}.bak" ] || mv $config $config.bak
cat << EOF > $config
storage:
  dbPath: /var/lib/mongodb
  journal:
    enabled: true
  engine: wiredTiger

systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log

net:
  port: 27017
  bindIp: 0.0.0.0
EOF
systemctl restart mongod


## elasticsearch
wait_elastic() {
    elastic=0
    while [ $elastic -eq 0 ]
    do
        curl -s "http://localhost:9200" 2>&1 > /dev/null \
            && elastic=1 \
            || echo "waiting for elastic..."
        sleep 1
    done
}
if ! _skip_install elasticsearch; then
    wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
    echo "deb http://packages.elastic.co/elasticsearch/1.7/debian stable main" \
        > /etc/apt/sources.list.d/elastic.list

    apt-get -y update
    apt-get -y install --no-install-recommends \
        openjdk-8-jre-headless \
        elasticsearch

    systemctl enable elasticsearch
fi

# tune elasticsearch
config='/etc/elasticsearch/elasticsearch.yml'
[ -f "${config}.bak" ] || mv $config $config.bak
cat << EOF > $config
network.bind_host: 0.0.0.0
node.local: true
discovery.zen.ping.multicast: false
EOF
systemctl restart elasticsearch
wait_elastic
unset config


## redis
if ! _skip_install redis-server; then
    apt-get -y install software-properties-common
    add-apt-repository -y ppa:chris-lea/redis-server
    apt-get -y install --no-install-recommends redis-server

    systemctl enable redis-server
    systemctl restart redis-server
fi


### deploy
## env.sh
envfile=/opt/superdesk/env.sh
[ -f $envfile ] || cat << "EOF" > $envfile
LANG=en_US.UTF-8
LANGUAGE=en_US:en
LC_ALL=en_US.UTF-8
PYTHONIOENCODING="utf-8"
PYTHONUNBUFFERED=1

HOST=${HOST:-localhost}
[ -n "${SSL:-}" ] && SSL='s' || SSL=''

# TODO: need to get rid this for proper SaaS
SUPERDESK_CLIENT_URL=${SUPERDESK_CLIENT_URL:-"http$SSL://$HOST"}

# To work properly inside and outside container, must be
# - "proxy_set_header Host <host>;" in nginx
# - the same "<host>" for next two settings
# TODO: try to fix at backend side, it should accept any host
SUPERDESK_URL=${SUPERDESK_URL:-"http$SSL://$HOST/api"}
CONTENTAPI_URL=${CONTENTAPI_URL:-"http$SSL://$HOST/contentapi"}


MONGO_URI=${MONGO_URI:-"mongodb://localhost/superdesk"}
LEGAL_ARCHIVE_URI=${LEGAL_ARCHIVE_URI:-"mongodb://localhost/superdesk_la"}
ARCHIVED_URI=${ARCHIVED_URI:-"mongodb://localhost/superdesk_ar"}
CONTENTAPI_MONGO_URI=${CONTENTAPI_MONGO_URI:-"mongodb://localhost/superdesk_pa"}
ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-"http://localhost:9200"}
ELASTICSEARCH_INDEX=${ELASTICSEARCH_INDEX:-"superdesk"}
CONTENTAPI_ELASTICSEARCH_INDEX=${CONTENTAPI_ELASTICSEARCH_INDEX:-"superdesk_capi"}
# TODO: fix will be in 1.6 release, keep it for a while
CONTENTAPI_ELASTIC_INDEX=$CONTENTAPI_ELASTICSEARCH_INDEX

REDIS_URL=${REDIS_URL:-redis://localhost:6379/1}

C_FORCE_ROOT=1
CELERYBEAT_SCHEDULE_FILENAME=${CELERYBEAT_SCHEDULE_FILENAME:-/tmp/celerybeatschedule}
CELERY_BROKER_URL=${CELERY_BROKER_URL:-$REDIS_URL}

MAIL_FROM=${MAIL_FROM-''}
MAIL_SERVER=${MAIL_SERVER-localhost}
MAIL_PASSWORD=${MAIL_PASSWORD-''}
MAIL_PORT=${MAIL_PORT-25}
MAIL_USERNAME=${MAIL_USERNAME-''}
MAIL_USE_SSL=${MAIL_USE_SSL-False}
MAIL_USE_TLS=${MAIL_USE_TLS-False}

AMAZON_ACCESS_KEY_ID=${AMAZON_ACCESS_KEY_ID:-}
AMAZON_SECRET_ACCESS_KEY=${AMAZON_SECRET_ACCESS_KEY:-}
AMAZON_CONTAINER_NAME=${AMAZON_CONTAINER_NAME:-}
AMAZON_S3_SUBFOLDER=${AMAZON_S3_SUBFOLDER:-$(hostname)}
AMAZON_REGION=${AMAZON_REGION:-'eu-west-1'}
AMAZON_SERVER=${AMAZON_SERVER:-amazonaws.com}
AMAZON_SERVE_DIRECT_LINKS=${AMAZON_SERVE_DIRECT_LINKS:-True}
AMAZON_S3_USE_HTTPS=${AMAZON_S3_USE_HTTPS:-False}
AMAZON_PROXY_SERVER=${AMAZON_PROXY_SERVER:-}
AMAZON_URL_GENERATOR=${AMAZON_URL_GENERATOR:-default}

IFRAMELY_KEY=${IFRAMELY_KEY:-}
SENTRY_DSN=${SENTRY_DSN:-}
NEW_RELIC_APP_NAME=${NEW_RELIC_APP_NAME:-}
NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY:-}

if [ -n "${SUPERDESK_TESTING:-}" ]; then
    SUPERDESK_TESTING=True
    CELERY_ALWAYS_EAGER=True
fi
EOF

## load env.sh and custom settings in activation script
config=/etc/superdesk.sh
activate=/opt/superdesk/env/bin/activate
grep "$envfile" $activate || cat << EOF >> $activate
set -a
[ -f $config ] && . $config
. $envfile
set +a
EOF
unset envfile config activate

## prepare dist directory
_activate
dist_orig=/opt/superdesk/client/dist
dist=${dist_orig}-deploy
rm -rf $dist
cp -r $dist_orig $dist
sed -i \
    -e "s|<SUPERDESK_URL>|http$SSL://$HOST/api|" \
    -e "s|<SUPERDESK_WS_URL>|ws$SSL://$HOST/ws|" \
    -e "s|<IFRAMELY_KEY>|${IFRAMELY_KEY:-}|" \
    -e "s|<EMBEDLY_KEY>|${EMBEDLY_KEY:-}|" \
    -e "s|<RAVEN_DSN>|${RAVEN_DSN:-}|" \
    $dist/app.bundle.*
unset dist_orig dist


## nginx
if ! _skip_install nginx; then
    wget -qO - http://nginx.org/keys/nginx_signing.key | sudo apt-key add -
    echo "deb http://nginx.org/packages/ubuntu/ xenial nginx" \
        > /etc/apt/sources.list.d/nginx.list

    apt-get -y update
    apt-get -y install nginx

    systemctl enable nginx
    systemctl restart nginx
fi

path=/etc/nginx/conf.d
cat << "EOF" > $path/params.conf
tcp_nopush on;
tcp_nodelay on;
output_buffers 1 256k;
postpone_output 0;
keepalive_requests 210;
reset_timedout_connection on;
ignore_invalid_headers  on;
server_tokens off;
client_max_body_size 1024m;
recursive_error_pages   on;
server_name_in_redirect off;

gzip on;
gzip_disable "msie6";
gzip_vary on;
gzip_proxied any;
gzip_comp_level 1;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript;

proxy_set_header Host $host;
proxy_set_header X-Forwarded-For $remote_addr;
proxy_set_header Accept-Encoding "";
proxy_buffering on;
proxy_ignore_client_abort off;
proxy_intercept_errors on;
proxy_next_upstream error timeout invalid_header;
proxy_redirect off;
proxy_buffer_size 32k;
proxy_buffers 8 32k;
proxy_busy_buffers_size 64k;
proxy_temp_file_write_size 64k;
client_body_buffer_size 128k;
proxy_connect_timeout 1;
proxy_send_timeout 300;
proxy_read_timeout 300;
proxy_cache_min_uses 1;
proxy_temp_path /var/tmp;
EOF

cat << EOF > $path/default.conf
server {
    listen 80 default;

    location /ws {
        proxy_pass http://localhost:5100;
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_read_timeout 3600;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location /api {
        proxy_pass http://localhost:5000;
        proxy_set_header Host $HOST;
        expires epoch;
    }

    location /contentapi {
        proxy_pass http://localhost:5400;
        proxy_set_header Host $HOST;
        expires epoch;
    }

    location /.well-known {
        root /var/tmp;
    }

    location / {
        root /opt/superdesk/client/dist-deploy;
    }
}
EOF
unset path
nginx -s reload


## supervisor
if ! _skip_install supervisor; then
    apt-get -y install supervisor

    systemctl enable supervisor
    systemctl restart supervisor
    sleep 1
fi

[ -d /var/log/superdesk ] || mkdir /var/log/superdesk
cat << "EOF" > /etc/supervisor/conf.d/superdesk.conf
[program:rest]
command=/bin/sh -c '. /opt/superdesk/env/bin/activate && exec gunicorn -b 0.0.0.0:5000 wsgi'
autostart=true
autorestart=true
stdout_logfile=/var/log/superdesk/rest.log
redirect_stderr=true
directory=/opt/superdesk/server

[program:wamp]
command=/bin/sh -c '. /opt/superdesk/env/bin/activate && exec python -u ws.py'
autostart=true
autorestart=true
stdout_logfile=/var/log/superdesk/wamp.log
redirect_stderr=true
directory=/opt/superdesk/server

[program:work]
command=/bin/sh -c '. /opt/superdesk/env/bin/activate && exec celery -A worker worker --loglevel=DEBUG'
user=nobody
autostart=true
autorestart=true
#startsecs=10
#killasgroup=true
stdout_logfile=/var/log/superdesk/work.log
redirect_stderr=true
directory=/opt/superdesk/server

[program:beat]
command=/bin/sh -c '. /opt/superdesk/env/bin/activate && exec celery -A worker beat --loglevel=DEBUG --pid='
user=nobody
autostart=true
autorestart=true
#startsecs=10
stdout_logfile=/var/log/superdesk/beat.log
redirect_stderr=true
directory=/opt/superdesk/server

[program:capi]
command=/bin/sh -c '. /opt/superdesk/env/bin/activate && exec gunicorn -b 0.0.0.0:5400 content_api.wsgi'
autostart=true
autorestart=true
stdout_logfile=/var/log/superdesk/capi.log
redirect_stderr=true
directory=/opt/superdesk/server
EOF
supervisorctl update
supervisorctl restart all


### prepopulate
_activate
cd /opt/superdesk/server
[ -z "${sample_data:-1}" ] || sample_data='--sample-data'
python manage.py app:initialize_data --help | grep -q -- --sample-data && sample_data=$sample_data || sample_data=

python manage.py app:initialize_data $sample_data
python manage.py users:create -u admin -p admin -e 'admin@example.com' --admin
